@model Simplelife.ViewModels.NotesViewModel

@{
    ViewBag.Title = "Заметки";
}

<div class="container">
    <div class="row">
        <ul class="notes">
            <li id="add-note" style="cursor:pointer">
                <div class="yellow-bg">
                    <i class="fa fa-plus-square fa-5x"></i>
                </div>
            </li>
            @foreach (var note in Model.Notes)
            {
                <li note="@note.Id">
                    <div class="yellow-bg">
                        <small>Сохранено</small>
                        <p contenteditable="true">@note.Content</p>
                        <a href="#" class="text-danger pull-right delete-note"><i class="fa fa-trash-o "></i></a>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>
@section Scripts{
    <script>
        $("#add-note").on('click', function () {
            $(this).after("<li  style=\"opacity:0\"> \
            <div class=\"yellow-bg\"> \
                <small>Сохранено</small> \
                <p contenteditable=\"true\"></p> \
                <a href=\"#\" class=\"text-danger pull-right\"><i class=\"fa fa-trash-o \"></i></a> \
            </div> \
        </li>")
            $(this).next().animate({ opacity: 1.0 }, 500, function () { $("div.yellow-bg:eq(1)").children("p").focus() })
        })
        $("ul.notes").on('focusout', "li div p", function () {
            var self = this;
            if ($(this).text() == "" && $(this).parent().parent().attr("note") == undefined) {
                $(this).parent().parent().remove()
            }
            else {
                $(this).parent().children("small").animate({ opacity: 1.0 }, 500).delay(1000).animate({ opacity: 0 }, 500);
                if ($(this).parent().parent().attr("note") == undefined) {
                    $.post("/Notes/saveNote", { content: $(this).text() }, function (data) {
                        $(self).parent().parent().attr("note", data['noteid'])
                        console.log(data['noteid'])
                        console.log($(self).parent().parent().attr("note"))
                    })
                    $("ul.notes").dragsort("destroy")
                    $("ul.notes").dragsort({
                        dragSelector: "li[note]", dragEnd: function () {
                            console.log($(this).prev().attr("note"))
                            console.log($(this).attr("note"))
                            console.log($(this).next().attr("note"))
                            $.post("/Notes/moveNote", { nextnote: $(this).prev().attr("note"), currentnote: $(this).attr("note"), prevnote: $(this).next().attr("note") })
                        },
                        dragSelectorExclude: "p,a",
                        dragBetween: true,
                        placeHolderTemplate: "<li></li>"
                    });
                    
                } else {
                    $.post("/Notes/saveNote", { noteId: $(this).parent().parent().attr("note"), categoryId: $(".current-category").attr("category"), content: $(this).text() }, function (data) {
                        console.log($(self).parent().attr({ note: data['noteid'] }));
                    })
                }
            }
        })
        $("ul.notes").on('keydown', "p[contenteditable]", function (e) {
            if (e.keyCode === 13) {
                // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)
                document.execCommand('insertHTML', false, '<br><br>');
                // prevent the default behaviour of return key pressed
                return false;
            }
        })
        $("ul.notes").on('click', "a.delete-note", function () {
            $(this).parent().parent().animate({ opacity: 0 }, 300, function () { $(this).remove() })
            $.post("/Notes/deleteNote", { noteId: $(this).parent().parent().attr("note") })
        })
        $("ul.notes").dragsort({
            dragSelector: "li[note]", dragEnd: function () {
                console.log($(this).prev().attr("note"))
                console.log($(this).attr("note"))
                console.log($(this).next().attr("note"))
                $.post("/Notes/moveNote", { nextnote: $(this).prev().attr("note"), currentnote: $(this).attr("note"), prevnote: $(this).next().attr("note") })
            },
            dragSelectorExclude: "p,a",
            dragBetween: true,
            placeHolderTemplate: "<li></li>"
        });
        $("ul.categories").on('click', ".add-category", function (e) {

        })
        $('.tree-toggle').click(function () {
            if ($(this).parent().parent().children('ul.tree').is(":visible"))
                $(this).addClass("glyphicon-chevron-right").removeClass("glyphicon-chevron-down");
            else
                $(this).addClass("glyphicon-chevron-down").removeClass("glyphicon-chevron-right");
            $(this).parent().parent().children('ul.tree').toggle(200);
        });
    </script>
}